{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"XOR_version1","private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyPqDDlQDl+ISctnRu1pJFhH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"x38pwBA5Xekn"},"source":["%tensorflow_version 1.x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HayhkMdYX_Bh"},"source":["import tensorflow as tf\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7qiytHZ4YCDn"},"source":["x_data = np.array([[0,0], [0,1], [1,0], [1,1]], dtype=np.float32)\n","y_data = np.array([[0],[1],[1],[0]], dtype=np.float32)  # AND gate랑 다른 부분"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xVeph2p4ZYeo"},"source":["print('x data : \\n', x_data)\n","print('x data shape : \\n', np.shape(x_data))\n","print('y data : \\n', y_data)\n","print('y data shape : \\n', np.shape(y_data))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_i_HuDVOZk9S"},"source":["# Placeholder\n","X = tf.placeholder(tf.float32, shape=[None, 2])\n","Y = tf.placeholder(tf.float32, shape=[None, 1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pG1BzMkVcop2"},"source":["# Weight, bias Variables\n","W1 = tf.Variable(tf.random_normal([2,2]), name = 'weight')\n","b1 = tf.Variable(tf.random_normal([1]), name = 'bias')\n","\n","# hidden layer\n","layer1 = tf.sigmoid(tf.matmul(X, W1) + b1)\n","\n","W2 = tf.Variable(tf.random_normal([2,1]), name = 'weight')\n","b2 = tf.Variable(tf.random_normal([1]), name = 'bias')\n","\n","hypothesis = tf.sigmoid(tf.matmul(layer1, W2) + b2)     # hypothesis => output layer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ob8-Aqjg6s1i"},"source":["# cost function : binary cross entropy\n","cost = -tf.reduce_mean(Y * tf.log(hypothesis) + (1 - Y) * tf.log(1 - hypothesis))\n","\n","# Gradient Descent Method\n","train = tf.train.GradientDescentOptimizer(learning_rate=0.2).minimize(cost)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kidv3uRh76rg"},"source":["predicted = tf.cast(hypothesis>0.5, dtype=tf.float32)\n","accuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float32))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5kdPeFTN8GpB"},"source":["with tf.Session() as sess:\n","    sess.run(tf.global_variables_initializer())\n","\n","    for step in range(3001):\n","        cost_val, _ = sess.run([cost, train], feed_dict={X:x_data, Y:y_data})\n","        if step % 100 == 0:\n","            print('step : ', step, ' cost : ', cost_val)\n","\n","    h, p, a = sess.run([hypothesis, predicted, accuracy], feed_dict={X:x_data, Y:y_data})\n","    print('\\nHypothesis: ', h, '\\nPredicted: ', p, '\\nAccuracy: ', a)"],"execution_count":null,"outputs":[]}]}